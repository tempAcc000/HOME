Algorithm ATE;
Variable
	V x;
	hidden V tmpX;
	hidden VArray sortedX;
	hidden intArray cntX;
	hidden int i, j, maxcnt,cnt;
	hidden constant T,E,a;
Conditions{
	assert(ahosize <= a);				/* 条件非常宽松，所有进程都可能发送错误消息，没有进程一定是正确进程 */
	assert(N > E);
	assert(T < N && T >= 2*(N+2*a-E));
	assert(a >= 0 && 4*a < N);
};
Round {
	SendPart
		send(<x>, All);
	TransitionPart
		for [ i = 1 to N ] {
				sortedX[i] = rcv[i].x;
				cntX[i]=1;
			};
		for [ i = 1 to N - 1 ] {
			for [ j = 1 to N - i ] {
				if ( sortedX[j] == NULL || (sortedX[j+1]!= NULL && sortedX[j]>sortedX[j+1]) ) {
					tmpX = sortedX[j];
					sortedX[j] = sortedX[j+1];
					sortedX[j+1] = tmpX;
				};
			};
		};
		tmpX=sortedX[1];
		maxcnt=1;
		for[ i= 2 to N ] {
			if( sortedX[i] != NULL && sortedX[i] == sortedX[i-1]) {
				cntX[i] = cntX[i-1]+1;
				if(cntX[i] > maxcnt){
					maxcnt=cntX[i];
					tmpX=sortedX[i];
				};
			};
		};
		if(hosize > T && tmpX != NULL){
			x=tmpX;
		};
		if(maxcnt > E && tmpX != NULL){
			DECIDE(tmpX);
		};
};

Univalence {
	cnt = 0;
	for [ i = 1 to N ] {
		if(x[i] == v){
			cnt = cnt + 1 ;
		};
	};
	assert(cnt > E-a);
};

