Algorithm CoordUniformVoting;
Variable
	V x = Vp;
	Vt vote = ?;
	hidden V tmpX, minX;
	hidden Vt tmpVote;
	hidden VArray arrayX;
	hidden int i;
	hidden bool flag;
Conditions{
	assert(x >= 1 && x <= N);	
	assert((vote >= 1 && vote <= N) || vote == ?);
	assert(krsize>=1);
	assert(shosize==hosize);
};
Round {
	SendPart
		if(isCoord)
			send( <x>, All);
	TransitionPart
		for[i=1 to N]{
			if(rcv[i].x!=NULL && Coord == i)
				x=rcv[i].x;
		};
};

Round {
	SendPart
		send(<x>,All);
	TransitionPart
		flag=true;
		tmpX=NULL;
		for[i = 1 to N ]{
			if(rcv[i].x != NULL){
				if(tmpX == NULL)					
					tmpX = rcv[i].x;
				if(tmpX != rcv[i].x)			/* 判断是否有不同的接收值 */
					flag = false;
			};	
		};
		if(tmpX != NULL && flag)				/* 如果至少有一个不为NULL的x值，且所有收到的值相等 */
			vote=tmpX;
};

Round {															/* 同UniformVoting */
	SendPart
		send(<x,vote>, All);
	TransitionPart
		flag=false;
		for[i = 1 to N ]{
			if( rcv[i].vote != NULL && rcv[i].vote!=? ){			/* 此处取最后一个非空的vote值，也可以取其他vote值 */
				x=rcv[i].vote;
				flag=true;
			};
		};
		
		if(flag==false){										/* 取最小的x值 */
			minX=NULL;
			for[i = 1 to N]{
				if(rcv[i].x!=NULL){
					if(minX==NULL||minX<rcv[i].x)
						minX=rcv[i].x;
				};	
			};
			if(minX!=NULL)
				x=minX;
		};
		
		if(flag){													/* 如果有非NULL且非?的vote值 */
			tmpVote = NULL;
			for [ i = 1 to N ] {
				if(rcv[i].vote != NULL){
					if(tmpVote == NULL)
						tmpVote = rcv[i].vote;
					if(rcv[i].vote == ? || (tmpVote != NULL && rcv[i].vote !=tmpVote) )		/* 如果有空的或不同的vote值，不做decide */
						flag = false;
				};
			};
			if(flag&&tmpVote!=?)
				DECIDE(tmpVote);
		};

		vote=?;
};

Invariant {
	for [ i = 1 to N ] {
		assume(vote[i] == ?);
	};
};

Univalence {
	for [ i = 1 to N ] {
		assert(x[i] == v);
	};
};
